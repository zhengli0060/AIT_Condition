"knockoff",
"dplyr")
YXD <- as.matrix(data %>% select(Treatment, starts_with("W"), Outcome))
View(YXD)
library("rstudioapi")
# Source required R scripts
setwd(dirname(getActiveDocumentContext()$path))
library(readxl)
library(Formula) # 加载Formula包
# source("E:\\testability_IV_JMLR\\control_IV\\controlfunctionIV-main\\R\\pretest.R")
# source("E:\\testability_IV_JMLR\\control_IV\\controlfunctionIV-main\\R\\cf.R")
source("pretest.R")
source("cf.R")
# 定义一个示例数据框
data <- data.frame(
W1 = c(1, 2, 3),
W2 = c(4, 5, 6),
X = c(7, 8, 9),
YW = c(10, 11, 12),
Z = c(13, 14, 15)
)
# 增强的函数：根据列名模式提取数据并转为矩阵
extract_columns <- function(data, pattern = "W") {
# 查找所有列名中包含模式的列
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# 如果没有匹配的列，提示用户并返回 NULL
message("No columns matching the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# 提取匹配的列并转换为矩阵
as.matrix(data[, cols, drop = FALSE])
}
# 使用该函数提取包含 'W' 的列
X_data <- extract_columns(data, pattern = "W")
# 打印结果
print("Extracted Matrix:")
print(X_data)
# 定义增强函数：提取以 "W" 开头的列并转换为矩阵
extract_columns <- function(data, pattern = "^W") {
# 查找列名以指定模式开头的列
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# 如果没有匹配的列，提示用户并返回 NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# 提取匹配的列并转换为矩阵
as.matrix(data[, cols, drop = FALSE])
}
# 示例数据框
data <- data.frame(
W1 = c(1, 2, 3),
W2 = c(4, 5, 6),
X = c(7, 8, 9),
YW = c(10, 11, 12),
Z = c(13, 14, 15)
)
# 使用函数提取以 "W" 开头的列
X_data <- extract_columns(data, pattern = "^W")
# 打印结果
print("Extracted Matrix:")
print(X_data)
# 定义增强函数：提取以 "W" 开头的列并转换为矩阵
extract_columns <- function(data, pattern = "^W") {
# 查找列名以指定模式开头的列
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# 如果没有匹配的列，提示用户并返回 NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# 提取匹配的列并转换为矩阵
as.matrix(data[, cols, drop = FALSE])
}
# 示例数据框
data <- data.frame(
W1 = c(1, 2, 3),
W2 = c(4, 5, 6),
X = c(7, 8, 9),
YW = c(10, 11, 12),
Z = c(13, 14, 15)
)
# 使用函数提取以 "W" 开头的列
X_data <- extract_columns(data, pattern = "^W")
# 打印结果
print("Extracted Matrix:")
print(X_data)
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
# X <- as.matrix(data[,c("W")])
X <- extract_columns(data, pattern = "^W")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A <- using_R_cf_with_W(data, Z.id)
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
# X <- as.matrix(data[,c("W")])
X <- extract_columns(data, pattern = "^W")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A <- using_R_cf_with_W(data, Z.id)
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
X <- as.matrix(data[,c("W1")])
# X <- extract_columns(data, pattern = "^W")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A <- using_R_cf_with_W(data, Z.id)
A
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
X <- as.matrix(data[,c("W1","W2")])
# X <- extract_columns(data, pattern = "^W")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A <- using_R_cf_with_W(data, Z.id)
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
X <- as.matrix(data[,c("W1")])
X2 <- as.matrix(data[,c("W2")])
# X <- extract_columns(data, pattern = "^W")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X + X2|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3)+X2+I(X2^2)+I(X2^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A <- using_R_cf_with_W(data, Z.id)
A
A[1]
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
X <- as.matrix(data[,c("W1")])
X2 <- as.matrix(data[,c("W2")])
# X <- extract_columns(data, pattern = "^W")
# result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X + X2|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3)+X2+I(X2^2)+I(X2^3))
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A <- using_R_cf_with_W(data, Z.id)
A[1]
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
using_R_cf_with_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
X <- as.matrix(data[,c("W1")])
X2 <- as.matrix(data[,c("W2")])
# X <- extract_columns(data, pattern = "^W")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X + X2|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3)+X2+I(X2^2)+I(X2^3))
# result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A2 <- using_R_cf_with_W(data, Z.id)
A2[1]
cols <- grep("^W", colnames(data), value = TRUE)
cols
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
# using_R_cf_with_W <- function(data, Z.id) {
#
#   Y <- scale(data[,"Treatment"])
#   D <- scale(data[,"Outcome"])
#   Z <- as.matrix(data[,c(Z.id)])
#   X <- as.matrix(data[,c("W1")])
#   X2 <- as.matrix(data[,c("W2")])
#   # X <- extract_columns(data, pattern = "^W")
#   result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X + X2|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3)+X2+I(X2^2)+I(X2^3))
#   # result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
#
#   # summary(cf.model)
#   coef <- result.model$coefficients
#   A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4) - coef[6]*X
# }
using_R_cf_with_W <- function(data, Z.id) {
# 标记以 W 开头的列
cols <- grep("^W", colnames(data), value = TRUE)
# 动态提取变量
W_vars <- lapply(cols, function(col) as.matrix(data[, col]))
names(W_vars) <- cols  # 给列表命名，方便动态建模时引用
# 处理响应变量和自变量
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
# 构建动态模型公式
formula_rhs <- paste0(
"D + I(D^2) + I(D^3) + I(D^4)",
paste0(" + ", cols, collapse = ""),  # 动态添加 W1, W2...
" | Z + I(Z^2) + I(Z^3)",
paste0(" + ", cols, collapse = ""),  # 动态添加 W1, W2...
paste0(" + I(", cols, "^2)", collapse = ""),  # 动态添加 I(W1^2), I(W2^2)...
paste0(" + I(", cols, "^3)", collapse = "")  # 动态添加 I(W1^3), I(W2^3)...
)
# 使用 cf() 函数拟合模型
result.model <- cf(as.formula(paste("Y ~", formula_rhs)))
# 提取系数并计算 A
coef <- result.model$coefficients
D_terms <- coef[2] * D + coef[3] * I(D^2) + coef[4] * I(D^3) + coef[5] * I(D^4)
W_terms <- Reduce(`+`, lapply(seq_along(W_vars), function(i) coef[5 + i] * W_vars[[i]]))
A <- Y - D_terms - W_terms
return(list(model = result.model, A = A))
}
using_R_cf_no_W <- function(data, Z.id) {
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)|Z+I(Z^2)+I(Z^3))
# summary(cf.model)
coef <- result.model$coefficients
A <- Y - coef[2]*D - coef[3]*I(D^2) - coef[4]*I(D^3) - coef[5]*I(D^4)
}
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A2 <- using_R_cf_with_W(data, Z.id)
# # # # Example usage:
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
A2 <- using_R_cf_with_W(data, Z.id)
data_path <- 'D:\\pythonProject\\AIT_Condition\\example_data\\Example_Data_compare_PIM_5000.csv'
data <- read.table(data_path, header = TRUE, sep = ",")
Z.id <- "IV1"
Y <- scale(data[,"Treatment"])
D <- scale(data[,"Outcome"])
Z <- as.matrix(data[,c(Z.id)])
# X <- as.matrix(data[,c("W1")])
# X2 <- as.matrix(data[,c("W2")])
X <- extract_columns(data, pattern = "^W")
extract_columns <- function(data, pattern = "^W") {
# Find column names starting with the specified pattern
cols <- grep(pattern, colnames(data), value = TRUE)
if (length(cols) == 0) {
# If no matching columns, display a message and return NULL
message("No columns starting with the pattern '", pattern, "' found in the dataset.")
return(NULL)
}
# Extract matching columns and convert to a matrix
as.matrix(data[, cols, drop = FALSE])
}
X <- extract_columns(data, pattern = "^W")
library(readxl)
library(Formula)
source("pretest.R")
source("cf.R")
result.model <- cf(Y~D+I(D^2)+I(D^3)+I(D^4)+ X|Z+I(Z^2)+I(Z^3)+X+I(X^2)+I(X^3))
# summary(cf.model)
coef <- result.model$coefficients
coef
A <- Y - coef[2] * D - coef[3] * (D^2) - coef[4] * (D^3) - coef[5] * (D^4) - X %*% coef[6:(6 + ncol(X) - 1)]
A
A
A <- Y - coef[2] * D - coef[3] * (D^2) - coef[4] * (D^3) - coef[5] * (D^4) - X %*% coef[6:(6 + ncol(X) - 1)]
A[1]
# 假设 formula 是模型的定义公式
formula <- Y ~ D + I(D^2) + I(D^3) + I(D^4) + X
# 生成设计矩阵
design_matrix <- model.matrix(formula, data = data.frame(Y, D, X))
# 计算 A
A <- Y - design_matrix %*% coef
A[1]
# 假设 formula 是模型的定义公式
formula <- Y ~ D + I(D^2) + I(D^3) + I(D^4) + X
# 生成设计矩阵
design_matrix <- model.matrix(formula, data = data.frame(D, X))
# 计算 A
A <- Y - design_matrix %*% coef[2:]
coef[2,:]
coef[2:,]
coef[2,]
coef[2:nrow(coef), ]
coef
coef[2:length(coef)]
Y - design_matrix %*% coef[2:nrow(coef), ]
Y - design_matrix %*% coef[2:length(coef)]
